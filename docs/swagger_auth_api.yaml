swagger: "2.0"
info:
  description: "Описание модели API для сервиса аутентификации учебного проекта Кинтеатр. Для примера можно использоваться ключ `special-key` для тестирования"
  version: "1.0.0"
  title: "Auth API team18"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "khaidukov.eugeniy@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "auth_api:8000"
basePath: "/v1"
tags:
- name: "user"
  description: "Операции с пользователем"
- name: "group"
  description: "Операции с группами пользователей (ролями)"
schemes:
- "https"
- "http"
paths:
  /user/register:
    post:
      tags:
      - "user"
      summary: "Регистрация пользователя"
      description: "Выполняется проверка на уже созданного полуьзователя и в случае отсутвия регистрируется новый пользователь"
      operationId: "registerUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
        "400":
          description: "User is already registered"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Авторизация пользователя в системе"
      description: "Авторизация происходит по email/пароль или access токену "
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "login"
        in: "query"
        description: "имя пользователя для входа"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "Пароль"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Логаут из пользовательской сессии"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/refresh:
    post:
      tags:
        - "user"
      summary: "Получение токена в обмен на refresh token"
      description: ""
      operationId: "refreshToken"
      produces:
        - "application/xml"
        - "application/json"
      parameters:
        - name: "refresh_token"
          in: "query"
          description: "refresh токен"
          required: true
          type: "string"
      responses:
        default:
          description: "successful operation"
  /user/account/{username}:
    get:
      tags:
      - "user"
      summary: "Получение инфомарции о пользователе"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "Перадется имя пользователя для получения инфомарции по пользователю"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    post:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "login"
        in: "path"
        description: "Логин обновляемого пользователя"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Обновленные данные пользователя"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
  /user/history:
    get:
      tags:
        - "user"
      summary: "Получение истории входов"
      description: ""
      operationId: "historyUser"
      produces:
        - "application/xml"
        - "application/json"
      parameters: [ ]
      responses:
        default:
          description: "successful operation"
  /group/update:
    put:
      tags:
        - "group"
      summary: "Добавить новую или изменить существующую группу пользователей"
      description: ""
      operationId: "groupAdd"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "name"
        description: "Имя группы"
        in: "body"
        required: true
        schema:
          $ref: "#/definitions/Group"
      responses:
        "200":
          description: "group updated"
        "201":
          description: "group created"
        "400":
          description: "group with such name already exists"
        "402":
          description: "login required"
        "403":
          description: "only superuseds may create new groups"
  #/group/update:
securityDefinitions:
  movies_auth:
    type: "oauth2"
    authorizationUrl: "http://movies_api:8000/oauth/dialog"
    flow: "implicit"
    scopes:
      write:movies: "Администратор"
      read:movies: "Просмотр фильмов"
      read:all_movies: "Просмотр всех фильмов по подписке"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      login:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
        format: "password"
      full_name:
        type: "string"
      phone:
        type: "string"
      avatar_link:
        type: "string"
        format: "url"
      address:
        type: "string"
        format: "string"
      created_at:
        type: "string"
        format: "date-time"
      updated_at:
        type: "string"
        format: "date-time"
    xml:
      name: "User"
  Group:
    type: "object"
    properties:
      id:
        type: "string"
        format: "uuid"
      name:
        type: "string"
      description:
        type: "string"
    xml:
      name: "Group"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
